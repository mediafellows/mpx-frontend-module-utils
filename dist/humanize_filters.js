// Generated by CoffeeScript 1.10.0
(function() {
  angular.module("mpx-frontend-module-utils").filter('humanizeBinaryValue', function() {
    return function(bytes, unit, precision) {
      var exp, pre;
      if (!bytes) {
        return 'Unknown';
      }
      if (unit == null) {
        unit = 1000;
      }
      if (precision == null) {
        precision = 1;
      }
      if (bytes < unit) {
        return bytes + ' B';
      }
      exp = Math.floor(Math.log(bytes) / Math.log(unit));
      pre = ' ' + (unit === 1000 ? "kMGTPE" : "KMGTPE")[exp - 1] + (unit === 1000 ? "" : "i") + 'B';
      return (bytes / Math.pow(unit, exp)).toFixed(precision) + pre;
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeBytes', function($filter) {
    return function(bytes) {
      return $filter('humanizeBinaryValue')(bytes, 1000, 0);
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeBytesWithPrecision2', function($filter) {
    return function(bytes) {
      return $filter('humanizeBinaryValue')(bytes, 1000, 2);
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeDateTime2Row', function($sce) {
    return function(date, format) {
      if (date == null) {
        return 'No Data';
      }
      if (format === 'short') {
        return moment(date).utc().format("DD.MM.YYYY, HH:mm");
      } else {
        return $sce.trustAsHtml("<span class='nowrap'>" + (moment(date).utc().format("DD MMM YYYY")) + ", </span> <span class='nowrap'>" + (moment(date).utc().format("HH:mm [UTC]")) + "</span>");
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeDateTime', function() {
    return function(date, format) {
      if (date == null) {
        return 'No Data';
      }
      if (format === 'short') {
        return moment(date).utc().format("DD.MM.YYYY, HH:mm");
      } else {
        return moment(date).utc().format("DD MMM YYYY, HH:mm [UTC]");
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeDate', function() {
    return function(date, format) {
      if (date == null) {
        return 'No Data';
      }
      if (format === 'short') {
        return moment.utc(date).format("DD.MM.YYYY");
      } else {
        return moment.utc(date).format("DD MMM YYYY");
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeLongNumber', function() {
    return function(val) {
      while (/(\d+)(\d{3})/.test(val.toString())) {
        val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
      }
      return val;
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeSwapLongNumber', function() {
    return function(value, precision) {
      var exp, pre, unit;
      unit = 1000;
      if (precision == null) {
        precision = 1;
      }
      if (value < unit) {
        return value.toFixed(precision);
      }
      exp = Math.floor(Math.log(value) / Math.log(unit));
      pre = ' ' + "kMGTPE"[exp - 1];
      return (value / Math.pow(unit, exp)).toFixed(precision) + pre;
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeBoolean', function($filter) {
    return function(value) {
      if (value === true || value === 'true') {
        return 'On';
      } else {
        return 'Off';
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeLayerType', function(capitalizeFilter) {
    return function(layerType) {
      if (!layerType) {
        return '';
      }
      layerType = _.last(layerType.split('/'));
      switch (layerType) {
        case 'itunes':
          return 'iTunes';
        default:
          return capitalizeFilter(layerType);
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeClass', function(capitalizeFilter) {
    return function(name) {
      if (!name) {
        return '';
      }
      return _.map(name.split('_'), capitalizeFilter).join(' ');
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeNamespacedClass', function(humanizeClassFilter) {
    return function(name) {
      if (!name) {
        return '';
      }
      return _.map(name.split('/'), humanizeClassFilter).join('/');
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeAssetType', function(capitalizeFilter) {
    return function(name) {
      if (!name) {
        return '';
      }
      return (_.map(name.split('/'), function(x) {
        return capitalizeFilter(x);
      })).join(' / ');
    };
  });

  angular.module("mpx-frontend-module-utils").filter('humanizeAssetClassification', function(capitalizeFilter) {
    return function(name) {
      if (!name) {
        return '';
      }
      return (_.map(name.split('_'), function(x) {
        return capitalizeFilter(x);
      })).join(' ');
    };
  });

}).call(this);
