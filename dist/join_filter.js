// Generated by CoffeeScript 1.10.0
(function() {
  angular.module("mpx-frontend-module-utils").filter('join', function() {
    return function(values) {
      if (_.isArray(values)) {
        return values.join(', ');
      } else {
        return values;
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('join_or_empty', function(joinFilter) {
    return function(values) {
      if (_.isEmpty(values)) {
        return 'empty';
      } else {
        return joinFilter(values);
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('join_on_name', function() {
    return function(values) {
      if (_.isArray(values)) {
        return _.map(values, 'name').join(', ');
      } else {
        return values;
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('join_on_id', function() {
    return function(values) {
      if (_.isArray(values)) {
        return _.map(values, 'id').join(',');
      } else {
        return values;
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('join_on_name_region', function() {
    return function(values) {
      var list;
      if (_.isArray(values)) {
        list = _.map(values, function(item) {
          if (_.isEmpty(item.region)) {
            return item.name;
          } else {
            return item.name + " (" + item.region + ")";
          }
        });
        return list.join(', ');
      } else {
        return values;
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('join_on_name_id', function() {
    return function(values) {
      var list;
      if (_.isArray(values)) {
        list = _.map(values, function(item) {
          return item.name + " (" + item.id + ")";
        });
        return list.join(', ');
      } else {
        return values;
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('user_full_name', function() {
    return function(value) {
      if (!_.isEmpty(value)) {
        return value.first_name + " " + value.last_name;
      } else {
        return null;
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('name_region', function() {
    return function(item) {
      if (!_.isEmpty(item)) {
        if (_.isEmpty(item.region)) {
          return item.name;
        } else {
          return item.name + " (" + item.region + ")";
        }
      } else {
        return null;
      }
    };
  });

  angular.module("mpx-frontend-module-utils").filter('name_id', function() {
    return function(item) {
      if (!_.isEmpty(item)) {
        return item.name + " (" + item.id + ")";
      } else {
        return null;
      }
    };
  });

}).call(this);
